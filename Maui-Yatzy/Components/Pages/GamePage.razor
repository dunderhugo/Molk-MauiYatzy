@page "/"
@using Maui_Yatzy.Components.Classes

<div class="gamePageBody">
    @if (!startGamePage)
    {
        <div class="menu-bar">
            <button @onclick="ChoosePlayersBtn">Nytt spel</button>
            <button onclick="location.href='/rules'" type="button">Regler</button>
            <button class="nyi-btn">Poängtavla</button>
            <button class="nyi-btn">Inställningar</button>
        </div>
    }

    <div class="mainGamePageContent">
        @if (startGamePage)
        {
            @if (startWindowToggle)
            {
                <div class="startGameWindow">
                    @foreach (var player in Player.PlayerList)
                    {
                        <div class="playersAddedBox">
                            <p>@player.ToString()</p>
                            <button @onclick="@(() => RemovePlayer(player))">Remove player</button>
                        </div>
                    }
                    <div class="addPlayers">
                        <input type="text" @bind="newPlayerName" placeholder="Enter player name" />
                        <button @onclick="AddPlayer">
                            Add player
                        </button>
                    </div>
                    <button class="start-game-btn" @onclick="StartGameBtn">
                        Start Game
                    </button>
                </div>
            }
            @if (!startWindowToggle)
            {
                <div class="gameBoard">
                    <table class="scoreboard">
                        <thead>
                            <tr>
                                <th>Category</th>
                                @foreach (var player in Player.PlayerList)
                                {
                                    <th>@player.ToString()</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in Scores)
                            {
                                <tr>
                                    <td style="font-weight: @(category.Category == "Summa" ? "800" : "normal");">
                                        @category.Category
                                    </td>
                                    @foreach (var player in Player.PlayerList)
                                    {
                                        <td><!--Add scores from players here--></td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="dice-area">
                        @foreach (var dice in DiceValues)
                        {
                            <div class="dice" style="@(dice.IsSelected ? "background-color: lightblue;" : "")" @onclick="() => ToggleSelection(dice.Index)">
                                <img class="dicesize" src="@GetDiceImage(dice.Value)" alt="Tärning @dice.Value" />
                            </div>
                        }
                    </div>
                    <div class="roll-dice-btn">
                        <button @onclick="RollDice">Kasta tärningarna</button>
                        <button @onclick="SaveScore">Spara poäng</button>
                    </div>

                </div>
            }
        }
    </div>
</div>
@code {
    private Dictionary<Player, List<ScoreModel>> playerScores = new();
    private int GetPlayerScore(Player player)
    {
        if (playerScores.ContainsKey(player))
        {
            return playerScores[player]
                .Where(score => score.Points.HasValue)
                .Sum(score => score.Points.Value);
        }
        return 0;
    }
    private bool startWindowToggle = true;
    private bool startGamePage = false;

    private List<DiceModel> DiceValues = new List<DiceModel>
    {
        new DiceModel { Index = 0, Value = 1 },
        new DiceModel { Index = 1, Value = 1 },
        new DiceModel { Index = 2, Value = 1 },
        new DiceModel { Index = 3, Value = 1 },
        new DiceModel { Index = 4, Value = 1 }
    };

    private List<ScoreModel> Scores = new List<ScoreModel>
    {
        new ScoreModel { Category = "Ettor" },
        new ScoreModel { Category = "Tvåor" },
        new ScoreModel { Category = "Treor" },
        new ScoreModel { Category = "Fyror" },
        new ScoreModel { Category = "Femmor" },
        new ScoreModel { Category = "Sexor" },
        new ScoreModel { Category = "Summa" },
        new ScoreModel { Category = "1 Par" },
        new ScoreModel { Category = "2 par" },
        new ScoreModel { Category = "Tretal" },
        new ScoreModel { Category = "Fyrtal" },
        new ScoreModel { Category = "Liten stege" },
        new ScoreModel { Category = "Stor stege" },
        new ScoreModel { Category = "Kåk" },
        new ScoreModel { Category = "Chans" },
        new ScoreModel { Category = "YATZY" },
        new ScoreModel { Category = "Summa" }
    };


    private void RollDice()
    {
        var random = new Random();

        foreach (var dice in DiceValues)
        {
            if (!dice.IsSelected) // Kasta bara icke-valda tärningar
            {
                dice.Value = random.Next(1, 7); // Generera ett värde mellan 1 och 6
            }
        }
    }

    private void ToggleSelection(int index)
    {
        DiceValues[index].IsSelected = !DiceValues[index].IsSelected;
    }

    private void SaveScore()
    {
        // Här sparar vi poängen för en kategori, till exempel "Ettor"
        var onesScore = DiceValues.Where(d => d.Value == 1).Sum(d => d.Value);
        var category = Scores.FirstOrDefault(s => s.Category == "Ettor");

        if (category != null && !category.Points.HasValue)
        {
            category.Points = onesScore;
        }
    }

    private void StartGameBtn()
    {
        startWindowToggle = !startWindowToggle;
    }
    private void ChoosePlayersBtn()
    {
        startGamePage = !startGamePage;
    }
    private string newPlayerName = string.Empty;
    private void AddPlayer()
    {
        if (!string.IsNullOrEmpty(newPlayerName))
        {
            Player.PlayerList.Add(new Player(newPlayerName));
            newPlayerName = string.Empty;
        }
    }
    private void RemovePlayer(Player player)
    {
        if (Player.PlayerList.Contains(player))
        {
            Player.PlayerList.Remove(player);
        }
    }

    private string GetDiceImage(int value)
    {
        return value switch
        {
            1 => "diceone.png",
            2 => "dicetwo.png",
            3 => "dicethree.png",
            4 => "dicefour.png",
            5 => "dicefive.png",
            6 => "dicesix.png",
            _ => "diceone.png" // Default om något går fel
        };
    }

    private class DiceModel
    {
        public int Index { get; set; }
        public int Value { get; set; }
        public bool IsSelected { get; set; } = false;
    }

    private class ScoreModel
    {
        public string Category { get; set; }
        public int? Points { get; set; } // Nullable för att visa "inte ifylld" med "-"
    }
}