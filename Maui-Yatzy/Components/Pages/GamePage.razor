@page "/"
@using Maui_Yatzy.Components.Classes


@if (startWindowToggle)
{
    <div class="startWindow">
        <div class="startGameWindow">
            <div>
                @foreach (var player in Player.PlayerList)
                {
                    <div class="playersAddedBox">
                        <p>@player.ToString()</p>
                        @* TODO: Fix remove button *@
                        <button>Remove player</button>
                    </div>
                }
            </div>

            <div class="addPlayers">
                <input type="text" @bind="newPlayerName" placeholder="Enter player name" />
                <button @onclick="AddPlayer">
                    Add player
                </button>
            </div>
            <button class="starGame" @onclick="StartGameBtn">
                Start Game
            </button>
        </div>
    </div>
}
@* @if (!startWindowToggle)
{
    <div class="gameBoard">
        <table>
            <thead>
                <tr>
                    <th>Category</th>
                    @foreach (var player in Player.PlayerList)
                    {
                        <th>@player.ToString()</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Scores)
                {
                    <tr>
                        <td>@category.Category</td>
                        @foreach (var player in Player.PlayerList)
                        {
                            <td>
                                @{
                                    var playerScore = playerScores[player]
                                    .FirstOrDefault(s => s.Category == category.Category)?.Points;
                                }
                                @(playerScore.HasValue ? playerScore.ToString() : "-")
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="dice-area">
        @foreach (var dice in DiceValues)
        {
            <div class="dice" style="@(dice.IsSelected ? "background-color: lightblue;" : "")" @onclick="() => ToggleSelection(dice.Index)">
                <img src="@GetDiceImage(dice.Value)" alt="Tärning @dice.Value" />
            </div>
        }
    </div>

    <button @onclick="RollDice">Kasta tärningarna</button>
    <button @onclick="SaveScore">Spara poäng</button>

    <h2>Poängtavla</h2>
    <table class="scoreboard">
        <thead>
            <tr>
                <th>Kategori</th>
                <th>Poäng</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var score in Scores)
            {
                <tr>
                    <td>@score.Category</td>
                    <td>@(score.Points.HasValue ? score.Points.Value.ToString() : "-")</td>
                </tr>
            }
        </tbody>
    </table>
} *@
@code {
    private Dictionary<Player, List<ScoreModel>> playerScores = new();
    private int GetPlayerScore(Player player)
    {
        if (playerScores.ContainsKey(player))
        {
            return playerScores[player]
                .Where(score => score.Points.HasValue)
                .Sum(score => score.Points.Value);
        }
        return 0;
    }
    private bool startWindowToggle = true;

    private List<DiceModel> DiceValues = new List<DiceModel>
    {
        new DiceModel { Index = 0, Value = 1 },
        new DiceModel { Index = 1, Value = 1 },
        new DiceModel { Index = 2, Value = 1 },
        new DiceModel { Index = 3, Value = 1 },
        new DiceModel { Index = 4, Value = 1 },
        new DiceModel { Index = 5, Value = 1 }
    };

    private List<ScoreModel> Scores = new List<ScoreModel>
    {
        new ScoreModel { Category = "Ettor" },
        new ScoreModel { Category = "Tvåor" },
        new ScoreModel { Category = "Treor" },
        new ScoreModel { Category = "Fyror" },
        new ScoreModel { Category = "Femmor" },
        new ScoreModel { Category = "Sexor" },
        new ScoreModel { Category = "Summa" },
        new ScoreModel { Category = "1 Par" },
        new ScoreModel { Category = "2 par" },
        new ScoreModel { Category = "Tretal" },
        new ScoreModel { Category = "Fyrtal" },
        new ScoreModel { Category = "Liten stege" },
        new ScoreModel { Category = "Stor stege" },
        new ScoreModel { Category = "Kåk" },
        new ScoreModel { Category = "Chans" },
        new ScoreModel { Category = "YATZY" },
        new ScoreModel { Category = "Summa" }
    };

    private void RollDice()
    {
        var random = new Random();

        foreach (var dice in DiceValues)
        {
            if (!dice.IsSelected) // Kasta bara icke-valda tärningar
            {
                dice.Value = random.Next(1, 7); // Generera ett värde mellan 1 och 6
            }
        }
    }

    private void ToggleSelection(int index)
    {
        DiceValues[index].IsSelected = !DiceValues[index].IsSelected;
    }

    private void SaveScore()
    {
        // Här sparar vi poängen för en kategori, till exempel "Ettor"
        var onesScore = DiceValues.Where(d => d.Value == 1).Sum(d => d.Value);
        var category = Scores.FirstOrDefault(s => s.Category == "Ettor");

        if (category != null && !category.Points.HasValue)
        {
            category.Points = onesScore;
        }
    }

    private void StartGameBtn()
    {
        startWindowToggle = !startWindowToggle;
    }
    private string newPlayerName = string.Empty;
    private void AddPlayer()
    {
        if (!string.IsNullOrEmpty(newPlayerName))
        {
            Player.PlayerList.Add(new Player(newPlayerName));
            newPlayerName = string.Empty;
        }
    }

    private string GetDiceImage(int value)
    {
        return value switch
        {
            1 => "diceone.png",
            2 => "dicetwo.png",
            3 => "dicethree.png",
            4 => "dicefour.png",
            5 => "dicefive.png",
            6 => "dicesix.png",
            _ => "diceone.png" // Default om något går fel
        };
    }

    private class DiceModel
    {
        public int Index { get; set; }
        public int Value { get; set; }
        public bool IsSelected { get; set; } = false;
    }

    private class ScoreModel
    {
        public string Category { get; set; }
        public int? Points { get; set; } // Nullable för att visa "inte ifylld" med "-"
    }
}

